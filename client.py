import warnings
warnings.filterwarnings("ignore")
import asyncio
import websockets
import getpass
import tkinter as tk
from tkinter import ttk, messagebox  
from threading import Thread
import json
import base64
from PIL import Image, ImageTk
import io
import os
import socket
import platform
import requests
import uuid
import re 
try:
    from win10toast import ToastNotifier
    toaster = ToastNotifier()
except:
    toaster = None

# Configura√ß√µes
usuario = getpass.getuser()

# //* Configura√ß√µes para LOCAL
IP_SERVIDOR = "192.168.1.253" # LOCAL
PORTA = 8765 #LOCAL
HTTP_SERVIDOR = f"http://{IP_SERVIDOR}:8081" # LOCAL

LOGO_PATH = "logo_unimed.png"

# =============================================
# SISTEMA MELHORADO DE JANELAS - SOLU√á√ÉO DEFINITIVA
# =============================================

class WindowManager:
    """Gerenciador de janelas com solu√ß√£o definitiva para imagens"""
    def __init__(self):
        self.window_count = 0
        self.logo_image = None
        self._load_logo()
    
    def _load_logo(self):
        """Carrega o logo uma vez"""
        if os.path.exists(LOGO_PATH):
            try:
                logo_img = Image.open(LOGO_PATH)
                logo_img = logo_img.resize((100, 40), Image.Resampling.LANCZOS)
                self.logo_image = ImageTk.PhotoImage(logo_img)
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar logo: {e}")

# Inst√¢ncia global
window_manager = WindowManager()

def show_popup(titulo, mensagem, icon_path=None, message_data=None):
    """Popup Tkinter com solu√ß√£o definitiva para m√∫ltiplas imagens"""
    
    def _create_window():
        try:
            # Criar nova inst√¢ncia Tk para cada mensagem - ISOLADA
            root = tk.Tk()
            root.title(titulo)
            root.configure(bg='#f0f2f5')
            root.minsize(500, 400)
            root.resizable(True, True)
            # Manter por 1 segundo no topo, depois liberar
            root.attributes("-topmost", True)
            root.after(1000, lambda: root.attributes("-topmost", False))

            # Container principal
            main_frame = tk.Frame(root, bg='#f0f2f5')
            main_frame.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)

            # Header fixo
            header_frame = tk.Frame(main_frame, bg='#008E55', height=80)
            header_frame.pack(fill=tk.X, padx=0, pady=0)
            header_frame.pack_propagate(False)
            
            header_content = tk.Frame(header_frame, bg='#008E55')
            header_content.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
            
            if window_manager.logo_image:
                logo_label = tk.Label(header_content, image=window_manager.logo_image, bg='#008E55')
                logo_label.image = window_manager.logo_image
                logo_label.pack(side=tk.LEFT)
            
            title_container = tk.Frame(header_content, bg='#008E55')
            title_container.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(15, 0))
            
            main_title = tk.Label(title_container, 
                                text="Mensagem Interna - Unimed", 
                                font=('Arial', 14, 'bold'), 
                                fg='white', 
                                bg='#008E55')
            main_title.pack(anchor='w')
            
            sub_title = tk.Label(title_container, 
                              text="Comunica√ß√£o Corporativa", 
                              font=('Arial', 9), 
                              fg='#e8f5e8', 
                              bg='#008E55')
            sub_title.pack(anchor='w', pady=(2, 0))

            # Frame de conte√∫do com scroll
            content_container = tk.Frame(main_frame, bg='#ffffff')
            content_container.pack(fill=tk.BOTH, expand=True, padx=0, pady=0)

            # Criar canvas e scrollbar
            canvas = tk.Canvas(content_container, bg='#ffffff', highlightthickness=0)
            scrollbar = ttk.Scrollbar(content_container, orient="vertical", command=canvas.yview)
            scrollable_frame = tk.Frame(canvas, bg='#ffffff')

            # Configurar scroll
            scrollable_frame.bind(
                "<Configure>",
                lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
            )

            canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
            canvas.configure(yscrollcommand=scrollbar.set)

            # Empacotar
            canvas.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            # Scroll com mouse
            def _on_mousewheel(event):
                canvas.yview_scroll(int(-1*(event.delta/120)), "units")
            
            canvas.bind("<MouseWheel>", _on_mousewheel)

            # Conte√∫do da mensagem
            content_frame = tk.Frame(scrollable_frame, bg='#ffffff')
            content_frame.pack(fill=tk.BOTH, expand=True, padx=25, pady=25)

            # Cabe√ßalho da mensagem
            header_message = tk.Frame(content_frame, bg='#ffffff')
            header_message.pack(fill=tk.X, pady=(0, 20))

            # √çcone e informa√ß√µes
            message_type = message_data.get('type', 'text') if message_data else 'text'
            icon = "üì∑" if message_type == 'image' else "üí¨"
            
            icon_label = tk.Label(header_message, text=icon, font=('Arial', 16), bg='#ffffff')
            icon_label.pack(side=tk.LEFT, padx=(0, 10))

            info_frame = tk.Frame(header_message, bg='#ffffff')
            info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

            sender_name = tk.Label(info_frame, 
                                 text=f"De: {message_data.get('sender', 'Sistema')}",
                                 font=('Arial', 11, 'bold'),
                                 bg='#ffffff',
                                 fg='#2c3e50')
            sender_name.pack(anchor='w')

            timestamp = message_data.get('timestamp', '')[:19] if message_data else ''
            time_label = tk.Label(info_frame, 
                                text=timestamp, 
                                font=('Arial', 9),
                                bg='#ffffff',
                                fg='#7f8c8d')
            time_label.pack(anchor='w', pady=(2, 0))

            # Badge de tipo
            type_badge = tk.Frame(header_message, bg='#e8f5e8', relief='flat', bd=1)
            type_badge.pack(side=tk.RIGHT, padx=(10, 0))
            
            type_text = "IMAGEM" if message_type == 'image' else "TEXTO"
            type_label = tk.Label(type_badge, 
                                text=type_text,
                                font=('Arial', 8, 'bold'),
                                bg='#e8f5e8',
                                fg='#008E55',
                                padx=8,
                                pady=2)
            type_label.pack()

            # Container da mensagem
            message_container = tk.Frame(content_frame, bg='#f8f9fa', relief='flat', bd=1)
            message_container.pack(fill=tk.BOTH, expand=True, pady=(0, 20))

            message_inner = tk.Frame(message_container, bg='#ffffff')
            message_inner.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

            # SOLU√á√ÉO DEFINITIVA: Cada janela tem seu pr√≥prio namespace de imagens
            image_references = []  # Lista para manter refer√™ncias FORTES

            if message_data and message_data.get('type') == 'image':
                try:
                    # Configurar tamanho para imagens
                    root.geometry("650x700")
                    
                    # Texto adicional
                    texto_adicional = message_data.get('texto_adicional', '')
                    if texto_adicional:
                        text_frame = tk.Frame(message_inner, bg='#ffffff')
                        text_frame.pack(fill=tk.X, pady=(0, 20))
                        
                        text_label = tk.Label(text_frame, 
                                            text=texto_adicional, 
                                            wraplength=580, 
                                            justify="left",
                                            font=('Arial', 11),
                                            bg='#ffffff',
                                            fg='#2c3e50')
                        text_label.pack(anchor='w')
                    
                    # SOLU√á√ÉO: Processamento de imagem isolado por janela
                    image_data = base64.b64decode(message_data['content'])
                    
                    # Usar BytesIO para carregar a imagem
                    image_buffer = io.BytesIO(image_data)
                    original_image = Image.open(image_buffer)
                    
                    # Calcular tamanho proporcional
                    max_width = 580
                    max_height = 400
                    
                    # Manter propor√ß√£o
                    ratio = min(max_width/original_image.width, max_height/original_image.height)
                    new_width = int(original_image.width * ratio)
                    new_height = int(original_image.height * ratio)
                    
                    # Redimensionar
                    resized_image = original_image.resize((new_width, new_height), Image.Resampling.LANCZOS)
                    
                    # CONVERTER para formato compat√≠vel com Tkinter
                    if resized_image.mode in ('RGBA', 'LA'):
                        # Converter imagens com transpar√™ncia para RGB
                        background = Image.new('RGB', resized_image.size, (255, 255, 255))
                        background.paste(resized_image, mask=resized_image.split()[-1] if resized_image.mode == 'RGBA' else None)
                        resized_image = background
                    
                    # Criar PhotoImage - REFER√äNCIA FORTE na lista
                    photo_image = ImageTk.PhotoImage(resized_image, master=root)
                    image_references.append(photo_image)  # MANTER REFER√äNCIA
                    
                    # Frame para imagem centralizada
                    image_frame = tk.Frame(message_inner, bg='#ffffff')
                    image_frame.pack(fill=tk.BOTH, expand=True)
                    
                    # Criar label da imagem
                    img_label = tk.Label(image_frame, image=photo_image, bg='#ffffff')
                    img_label.image = photo_image  # Refer√™ncia adicional
                    img_label.pack(expand=True)
                    
                    # Informa√ß√µes da imagem
                    info_frame = tk.Frame(message_inner, bg='#ffffff')
                    info_frame.pack(fill=tk.X, pady=(15, 0))
                    
                    filename = message_data.get('filename', 'imagem.png')
                    file_info = tk.Label(info_frame, 
                                       text=f"üìé {filename} | üìè {original_image.width}√ó{original_image.height} ‚Üí {new_width}√ó{new_height}",
                                       font=('Arial', 9),
                                       bg='#ffffff',
                                       fg='#7f8c8d')
                    file_info.pack(anchor='w')
                    
                    # Fechar buffer
                    image_buffer.close()
                    
                    print(f"üñºÔ∏è Imagem carregada com sucesso: {filename} ({new_width}x{new_height})")
                    
                except Exception as e:
                    print(f"‚ùå Erro ao carregar imagem: {e}")
                    error_frame = tk.Frame(message_inner, bg='#ffffff')
                    error_frame.pack(fill=tk.BOTH, expand=True)
                    
                    error_label = tk.Label(error_frame, 
                                         text=f"‚ùå Erro ao carregar imagem\n{str(e)}", 
                                         fg='#e74c3c', 
                                         wraplength=500,
                                         font=('Arial', 10),
                                         bg='#ffffff',
                                         justify='center')
                    error_label.pack(expand=True)
            else:
                # Mensagem de texto
                root.geometry("600x550")
                
                # Frame para texto com scroll interno se necess√°rio
                text_container = tk.Frame(message_inner, bg='#ffffff')
                text_container.pack(fill=tk.BOTH, expand=True)
                
                # Texto da mensagem
                text_frame = tk.Frame(text_container, bg='#ffffff')
                text_frame.pack(fill=tk.BOTH, expand=True)
                
                # Usar Text widget para melhor controle de texto longo
                text_widget = tk.Text(text_frame, 
                                    wrap=tk.WORD,
                                    font=('Arial', 11),
                                    bg='#ffffff',
                                    fg='#2c3e50',
                                    padx=10,
                                    pady=10,
                                    relief='flat',
                                    borderwidth=0,
                                    highlightthickness=0)
                
                # Inserir texto
                text_widget.insert('1.0', mensagem)
                text_widget.config(state='disabled')  # Tornar readonly
                
                # Scrollbar para texto muito longo
                text_scrollbar = ttk.Scrollbar(text_frame, orient="vertical", command=text_widget.yview)
                text_widget.configure(yscrollcommand=text_scrollbar.set)
                
                text_widget.pack(side="left", fill="both", expand=True)
                text_scrollbar.pack(side="right", fill="y")

            # Bot√£o de fechar
            button_frame = tk.Frame(content_frame, bg='#ffffff')
            button_frame.pack(fill=tk.X, pady=(20, 0))
            
            btn_close = tk.Button(button_frame, 
                               text="‚úì Entendi", 
                               command=lambda: _safe_destroy(root, image_references), 
                               font=('Arial', 11, 'bold'),
                               bg='#008E55',
                               fg='white',
                               padx=30,
                               pady=10,
                               relief='flat',
                               cursor='hand2')
            btn_close.pack(pady=10)
            
            # Efeitos hover
            def on_enter(e):
                btn_close.config(bg='#006b41')
            def on_leave(e):
                btn_close.config(bg='#008E55')
            
            btn_close.bind("<Enter>", on_enter)
            btn_close.bind("<Leave>", on_leave)

            # Configurar fechamento seguro
            def _safe_destroy(window, img_refs):
                window_manager.window_count -= 1
                # Fechar janela primeiro
                window.destroy()
                # As refer√™ncias ser√£o liberadas automaticamente pelo garbage collector
                print(f"üìÅ Janela fechada ({window_manager.window_count} restantes)")

            root.protocol("WM_DELETE_WINDOW", lambda: _safe_destroy(root, image_references))

            # Posicionamento inteligente
            window_manager.window_count += 1
            root.update_idletasks()
            
            # Calcular posi√ß√£o com offset
            width = root.winfo_width()
            height = root.winfo_height()
            offset = (window_manager.window_count % 4) * 30
            
            x = (root.winfo_screenwidth() // 2) - (width // 2) + offset
            y = (root.winfo_screenheight() // 2) - (height // 2) + offset
            root.geometry(f"+{x}+{y}")

            # Focar na janela
            root.focus_force()
            root.lift()

            print(f"üìÅ Nova janela aberta ({window_manager.window_count} total)")

            # Ajustar scroll para o topo
            canvas.update_idletasks()
            canvas.yview_moveto(0.0)
            
            # SOLU√á√ÉO CR√çTICA: Manter refer√™ncia da janela root
            def keep_alive():
                try:
                    root.mainloop()
                except Exception as e:
                    print(f"Janela finalizada: {e}")
            
            keep_alive()

        except Exception as e:
            print(f"‚ùå Erro cr√≠tico ao criar janela: {e}")

    # Executar em thread separada
    Thread(target=_create_window, daemon=True).start()

# =============================================
# FUN√á√ïES ORIGINAIS (MANTIDAS)
# =============================================

def get_system_unique_id():
    """Gera um ID √∫nico baseado no hostname e usu√°rio"""
    try:
        hostname = socket.gethostname()
        username = getpass.getuser()
        
        hostname_clean = re.sub(r'[^a-zA-Z0-9]', '', hostname)
        username_clean = re.sub(r'[^a-zA-Z0-9]', '', username)
        
        unique_id = f"{hostname_clean}_{username_clean}"
        
        print(f"üîë ID √∫nico gerado: {unique_id}")
        return unique_id
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao gerar ID √∫nico: {e}")
        return f"{getpass.getuser()}_{socket.gethostname()}"

def show_registration_form(system_info):
    """Mostra formul√°rio de cadastro para novos usu√°rios"""
    def _form():
        root = tk.Tk()
        root.title("Cadastro - Unimed")
        root.geometry("500x400")
        root.configure(bg='#008E55')
        root.resizable(False, False)
        root.attributes("-topmost", True)
        
        
        # Header
        header = tk.Frame(root, bg='#008E55', height=80)
        header.pack(fill=tk.X, padx=0, pady=0)
        
        title = tk.Label(header, text="üìù Cadastro de Colaborador", 
                        font=('Arial', 16, 'bold'), fg='white', bg='#008E55')
        title.pack(pady=20)

        # Container principal
        container = tk.Frame(root, bg='white')
        container.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # Informa√ß√µes da m√°quina
        info_frame = tk.Frame(container, bg='#f8f9fa', relief=tk.SUNKEN, bd=1)
        info_frame.pack(fill=tk.X, pady=(0, 15))
        
        tk.Label(info_frame, text="üíª Informa√ß√µes da M√°quina:", 
                font=('Arial', 10, 'bold'), bg='#f8f9fa').pack(anchor='w', pady=(10,5), padx=10)
        tk.Label(info_frame, text=f"Computador: {system_info['hostname']}", 
                font=('Arial', 9), bg='#f8f9fa').pack(anchor='w', padx=10)
        tk.Label(info_frame, text=f"Usu√°rio Windows: {system_info['username']}", 
                font=('Arial', 9), bg='#f8f9fa').pack(anchor='w', padx=10, pady=(0,10))

        # Bot√£o simples
        btn_frame = tk.Frame(container, bg='white')
        btn_frame.pack(fill=tk.X, pady=20)
        
        btn = tk.Button(btn_frame, text="‚úÖ Cadastro Autom√°tico", 
                      command=root.destroy,
                      font=('Arial', 12, 'bold'),
                      bg='#008E55', fg='white', padx=20, pady=10)
        btn.pack()
        
        root.mainloop()
        return True

    return _form()

def get_system_info():
    """Coleta informa√ß√µes completas da m√°quina"""
    try:
        hostname = socket.gethostname()
        username = getpass.getuser()
        sistema_operacional = platform.system()
        unique_id = get_system_unique_id()
        
        system_info = {
            'hostname': hostname,
            'username': username,
            'os': sistema_operacional,
            'platform': platform.platform(),
            'unique_id': unique_id
        }
        return system_info
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao coletar informa√ß√µes do sistema: {e}")
        return {'username': getpass.getuser(), 'unique_id': getpass.getuser()}

def verificar_usuario_cadastrado(unique_id):
    """Verifica se o usu√°rio j√° est√° cadastrado no servidor"""
    try:
        response = requests.get(
            f'{HTTP_SERVIDOR}/admin/verificar_usuario/{unique_id}', 
            timeout=5
        )
        if response.status_code == 200:
            data = response.json()
            return data.get('cadastrado', False)
        else:
            print(f"‚ùå Erro na verifica√ß√£o: {response.status_code}")
            return False
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Erro de conex√£o na verifica√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro inesperado na verifica√ß√£o: {e}")
        return False

def show_connection_status(connected):
    """Mostra status da conex√£o na bandeja do sistema"""
    if toaster:
        status = "conectado" if connected else "desconectado"
        Thread(target=lambda: toaster.show_toast(
            "Sistema de Mensagens - Unimed",
            f"Status: {status}",
            duration=3,
            threaded=True
        )).start()

async def listen():
    # Coletar informa√ß√µes √∫nicas do sistema
    system_info = get_system_info()
    unique_id = system_info['unique_id']
    hostname = system_info.get('hostname', 'N/A')
    
    print("=" * 50)
    print("üöÄ CLIENTE DE MENSAGENS - UNIMED")
    print("=" * 50)
    print(f"üë§ Usu√°rio Windows: {system_info['username']}")
    print(f"üíª Computador: {hostname}")
    print(f"üîë ID √önico: {unique_id}")
    print("=" * 50)
    
    # Verificar se usu√°rio j√° est√° cadastrado
    print("üîç Verificando cadastro no servidor...")
    usuario_cadastrado = verificar_usuario_cadastrado(unique_id)
    
    if not usuario_cadastrado:
        print("üìù Usu√°rio n√£o cadastrado. Iniciando processo de cadastro...")
        cadastro_sucesso = show_registration_form(system_info)
        
        if cadastro_sucesso:
            print("‚úÖ Cadastro realizado com sucesso! Conectando ao servidor...")
            await asyncio.sleep(2)
        else:
            print("‚ùå Cadastro n√£o realizado. Tentando conectar como usu√°rio n√£o cadastrado...")
    else:
        print("‚úÖ Usu√°rio j√° cadastrado. Conectando ao servidor...")
    
    # Conex√£o normal com o servidor WebSocket
    username_para_conexao = unique_id
    uri = f"ws://{IP_SERVIDOR}:{PORTA}"
    reconnect_count = 0
    max_reconnect_delay = 30
    
    while True:
        try:
            async with websockets.connect(uri) as websocket:
                await websocket.send(username_para_conexao)
                
                print(f"‚úÖ Conectado ao servidor com sucesso!")
                print(f"üì° Enviando como: {username_para_conexao}")
                show_connection_status(True)
                reconnect_count = 0
                
                while True:
                    msg = await websocket.recv()
                    try:
                        data = json.loads(msg)
                        sender = data.get('sender', 'Unknown')
                        msg_type = data.get('type', 'text')
                        
                        print(f"üì® Mensagem recebida de {sender}: {msg_type.upper()}")

                        # Notifica√ß√£o na Central de A√ß√µes
                        if toaster:
                            if msg_type == 'text':
                                notification_msg = data['content']
                                notification_title = f"Unimed - {sender}"
                            else:
                                texto_adicional = data.get('texto_adicional', '')
                                if texto_adicional:
                                    notification_msg = f"üì∑ {texto_adicional}"
                                else:
                                    notification_msg = "üì∑ Nova imagem recebida"
                                notification_title = f"Unimed - {sender}"
                                
                            Thread(target=lambda: toaster.show_toast(
                                notification_title,
                                notification_msg,
                                duration=5,
                                threaded=True
                            )).start()

                        # Popup Tkinter
                        if msg_type == 'text':
                            show_popup("Mensagem - Unimed", 
                                     data['content'], 
                                     message_data=data)
                        else:
                            texto_popup = data.get('texto_adicional', 'Nova imagem recebida')
                            show_popup("Imagem - Unimed", 
                                     texto_popup,
                                     message_data=data)

                    except json.JSONDecodeError:
                        print(f"‚ùå Mensagem n√£o JSON recebida: {msg}")
                    except Exception as e:
                        print(f"‚ùå Erro ao processar mensagem: {e}")

        except websockets.ConnectionClosed:
            print(f"üîå Conex√£o com o servidor foi fechada")
            show_connection_status(False)
        except ConnectionRefusedError:
            print(f"‚ùå Servidor recusou a conex√£o. Verifique se o servidor est√° rodando.")
            show_connection_status(False)
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            show_connection_status(False)

        # Reconex√£o com backoff exponencial
        reconnect_count += 1
        delay = min(3 * reconnect_count, max_reconnect_delay)
        
        print(f"üîÑ Tentando reconectar em {delay} segundos... (Tentativa {reconnect_count})")
        await asyncio.sleep(delay)

def check_dependencies():
    """Verifica se todas as depend√™ncias est√£o instaladas"""
    missing_deps = []
    
    try:
        import websockets
    except ImportError:
        missing_deps.append("websockets")
    
    try:
        import PIL
    except ImportError:
        missing_deps.append("Pillow")
    
    if missing_deps:
        print("‚ùå Depend√™ncias faltando:")
        for dep in missing_deps:
            print(f"   - {dep}")
        print(f"\nüí° Instale com: pip install {' '.join(missing_deps)}")
        return False
    
    return True

if __name__ == "__main__":
    # Verificar depend√™ncias
    if not check_dependencies():
        input("Pressione Enter para sair...")
        exit(1)
    
    try:
        print("Iniciando cliente de mensagens...")
        asyncio.run(listen())
    except KeyboardInterrupt:
        print("\n\nüî¥ Cliente encerrado pelo usu√°rio")
    except Exception as e:
        print(f"\n\n‚ùå Erro fatal: {e}")
        input("Pressione Enter para sair...")